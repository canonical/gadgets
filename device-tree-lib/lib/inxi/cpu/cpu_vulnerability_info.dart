import 'package:device_tree_lib/tree_node_representable.dart';
import 'package:flutter_fancy_tree_view/flutter_fancy_tree_view.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

import 'cpu_vulnerability.dart';

part 'cpu_vulnerability_info.freezed.dart';
part 'cpu_vulnerability_info.g.dart';

@freezed
class CPUVulnerabilityInfo
    with _$CPUVulnerabilityInfo
    implements TreeNodeRepresentable {
  const CPUVulnerabilityInfo._();
  factory CPUVulnerabilityInfo(
          {required List<CPUVulnerability> vulnerabilities}) =
      _CPUVulnerabilityInfo;

  factory CPUVulnerabilityInfo.fromReport(Map<String, dynamic> map) =>
      CPUVulnerabilityInfo(
          vulnerabilities: (map["CPU"]! as List)
              .cast<Map<String, dynamic>>()
              .where((element) => CPUVulnerability.isRepresentation(element))
              .map(CPUVulnerability.fromMap)
              .toList());
  // .where((element) => element.status != "Not affected"));

  factory CPUVulnerabilityInfo.fromJson(Map<String, dynamic> json) =>
      _$CPUVulnerabilityInfoFromJson(json);

  @override
  TreeNode treeNodeRepresentation() {
    return TreeNode(id: "Vulnerabilities", data: this);
  }

  @override
  Iterable<TreeNodeRepresentable> children() {
    return vulnerabilities;
  }
}
